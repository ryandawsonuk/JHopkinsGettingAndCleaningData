find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
library(KernSmooth)
packageDescription("KernSmooth")
getwd()
load('swirl')
swirl()
library("swirl")
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
size(plants)
object.size(plants)
names(plants)
head(plants)
?head
head(x=plants,n=10L)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
?str
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTER
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, prob(0.3,0.7))
flips <- sample(c(0,1), 100, prob = (0.3,0.7))
flips <- sample(c(0,1), 100, prob = c(0.3,0.7))
flips <- sample(c(0,1), 100, replace=TRUE, prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips <- rbinom(1, size = 100, prob = 0.7)
flips <- rbinom(n=100, 1 = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean=100, sd=25)
?rpois
rpois(5,10)
my_pois <- replicate(100, rpois(5,10))
my_pois
colmeans(my_pois)
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab="Speed")
plot(x = cars$speed, y = cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(cars,title="My Plot")
plot(cars,main="My Plot")
?plot
plot(cars,sub="My Plot Subtitle")
plot(cars,col=2)
plot(cars,xlim = c(10,15))
?points
plot(cars,pch=2
)
ls()
data(mtcars)
?boxplot
boxplot(data=mtcars, formula = mpg ~ cyl)
boxplot(x=mtcars, formula = mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
?plot
plot(x,y)
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
today()
this_day <- today()
this_day
this_day.year()
year(this_day)
wday(this_day)
wday(this_day, label=TRUE)
now()
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 11, minutes = 03, seconds = 30)
this_moment
?now
nyc <- now("America/New_York")
nyc
nyc + days(2)
depart <- nyc + days(2)
depart
depart <- update(depart, hours=17, minutes=34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tz(arrive, tzone="Asia/Hong Kog")
with_tz(arrive, tzone="Asia/Hong_Kog")
with_tz(arrive, tzone="Asia/Hong_Kong")
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz="Singapore")
last_time
?interval
how_long <- interval(last_time,arrive)
as.period(how_long)
stopwatch()
library(swirl)
swirl()
?read.csvv
?read.csv
read.csv(path2csv,stringsAsFactors = FALSE)
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
skip()
skip()
library(dplyr)
skip()
skip()
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
skip()
select(cran, -(5:20))
-(5:20)
select(cran, -(5:20))
select(cran, -(X:size))
filter(cran, package="swirl")
filter(cran, package=="swirl")
filter(cran, r_version=="3.1.1", country=="US")
?Comparison
filter(cran, r_version<="3.0.2", country=="IN")
filter(cran, r_version<="3.0.2", country=="IN" | country=="US")
filter(cran, country=="IN" | country=="US")
filter(cran, size >100500)
filter(cran, size >100500, r_os=="linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(R.version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package,mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs=0.99)
top_counts<- filter(pack_sum,count>679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique,probs=0.99)
filter(pack_sum,unique>465)
filter(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted
)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(data=res, col=sex_class, into=c("sex","class"))
submit()
students3
submit()
?spread
submit()
students3
reset()
swirl()
submit()
library(readr)
parse_number("class5")
submit
submit()
?mutate
source("script4.r")
source("script4.R")
source("script4.R")
submit()
script4()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(class = parse_number(class))
print
info()
skip()
students4
submit()
submit()
submit()
passed
failed
mutate(passed, status="passed")
passed <- mutate(passed, status="passed")
failed <- mutate(failed, status="failed")
bind_rows(passed, failed)
sat
submit()
?separate
submit()
submit()
setwd("C:/Users/ryan/Coursera/JHopkinsCleaningData/project")
?grep
?read.table
source("run_analysis.R")
source("run_analysis.R")
source("run_analysis.R")
source("run_analysis.R")
source("run_analysis.R")
source("run_analysis.R")
warnings()
warnings()
source("run_analysis.R")
source("run_analysis.R")
?select
require(dplyr)
?select
source("run_analysis.R")
source("run_analysis.R")
source("download_unzip.R")
?unzip
source("download_unzip.R")
?download.file
source("download_unzip.R")
source("download_unzip.R")
source("run_analysis.R")
source("download_unzip.R")
source("download_unzip.R")
?summarise
head(mergedData)
?arrange
source("run_analysis.R")
